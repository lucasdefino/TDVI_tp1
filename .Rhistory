default_fit <- predict(ajuste_log, newdata = data_new, type = "response")
vel_new <- seq(min(choque$vel), max(choque$vel), 1)
data_new <- data.frame(vel = vel_new)
default_fit <- predict(ajuste_log, newdata = data_new, type = "response")
plot(choque$vel, choque$choca, xlab = "temp", ylab = "def", pch=19)
lines(data_new$vel, default_fit, col = "red")
ajuste_log <- glm(defecto ~ temp, data = challenger, family = binomial)
temp_new <- seq(50, 85, 1)
data_new <- data.frame(temp = temp_new)
default_fit <- predict(ajuste_log, newdata = data_new, type = "response")
plot(challenger$temp, challenger$defecto, xlab = "temp", ylab = "def")
lines(data_new$temp, default_fit, col = "red")
ajuste_log <- glm(choque$choca ~ choque$vel, family=binomial)
summary(ajuste_log)
vel_new <- seq(min(choque$vel), max(choque$vel), 1)
data_new <- data.frame(vel = vel_new)
View(data_new)
default_fit <- predict(ajuste_log, newdata = data_new, type = "response")
help("predict")
plot(choque$vel, choque$choca, xlab = "vel", ylab = "choca", pch=19)
lines(data_new$vel, default_fit, col = "red")
View(data_new)
lines(default_fit,data_new$vel,col = "red")
ajuste_log <- glm(defecto ~ temp, data = challenger, family = binomial)
#temp_new <- seq(min(challenger$temp), max(challenger$temp), 1)
temp_new <- seq(50, 85, 1)
data_new <- data.frame(temp = temp_new)
default_fit <- predict(ajuste_log, newdata = data_new, type = "response")
plot(challenger$temp, challenger$defecto, xlab = "temp", ylab = "def")
lines(data_new$temp, default_fit, col = "red")
length(data_new$temp)
length(default_fit)
ajuste_log <- glm(choca ~ vel, data = choque, family=binomial)
summary(ajuste_log)
vel_new <- seq(min(choque$vel), max(choque$vel), 1)
data_new <- data.frame(vel = vel_new)
default_fit <- predict(ajuste_log, newdata = data_new2, type = "response")
data_new2 <- data.frame(vel = vel_new)
default_fit <- predict(ajuste_log, newdata = data_new2, type = "response")
plot(choque$vel, choque$choca, xlab = "vel", ylab = "choca", pch=19)
lines(data_new$vel, default_fit, col = "red")
ajuste_log <- glm(choca ~ vel, data = choque, family=binomial)
summary(ajuste_log)
confint(ajuste_log, 0.9)
confint(ajuste_log, level = 0.9)
beta_1 <- ajuste_log$coefficients[1]
beta_1 <- ajuste_log$coefficients[2]
ajuste_log <- glm(choca ~ vel, data = choque, family=binomial)
summary(ajuste_log)
beta_1 <- ajuste_log$coefficients[2]
sd_1 <- ajuste_log$coefficients[2][2]
sd_1 <- summary(ajuste_log)$coefficients[,2][2]
z <- qnorm(1-(0.1)/2)
IC <- c(beta_1-z*sd_1,beta_1+z*sd_1)
confint(ajuste_log, level = 0.9)
help("t.test")
help(prop.test)
library(ISLR2)
#7
rectaregresion <- lm(Auto$mpg ~ Auto$horsepower)
summary(rectaregresion)
plot(Auto$horsepower, Auto$mpg)
t <- qt(1-0.01/2, df=390)
a <- beta1 - t*sd_beta1
b <- beta1 + t*sd_beta1
beta1 <- sum((Auto$horsepower-x_raya)*(Auto$mpg-y_raya))/sum((Auto$horsepower-x_raya)^2)
x_raya <- mean(Auto$horsepower)
y_raya <- mean(Auto$mpg)
beta1 <- sum((Auto$horsepower-x_raya)*(Auto$mpg-y_raya))/sum((Auto$horsepower-x_raya)^2)
sd_beta1 <- sqrt((RSE^2)/TSS)
t <- qt(1-0.01/2, df=390)
a <- beta1 - t*sd_beta1
b <- beta1 + t*sd_beta1
sd_beta1 <- sqrt((RSE^2)/TSS)
RSE <- sqrt(sum((rectaregresion$residuals)^2)*(1/(length(Auto$horsepower)-2)))
sd_beta1 <- sqrt((RSE^2)/TSS)
t <- qt(1-0.01/2, df=390)
a <- beta1 - t*sd_beta1
b <- beta1 + t*sd_beta1
IC <- c(a,b)
t <- qt(1-0.01/2, df=390)
a <- beta1 - t*sd_beta1
sd_beta1 <- 0.006446
a <- beta1 - t*sd_beta1
b <- beta1 + t*sd_beta1
TSS <- sum((Auto$horsepower - x_raya)^2)
TSS <- sum((Auto$horsepower - y_raya)^2)
TSS <- sum((Auto$mpg - y_raya)^2)
help("cor")
cor(Auto$horsepower, Auto$mpg)
abline(rectamc, col="red")
abline(rectaregresion, col="red")
summary(rectaregresion)
var(Auto$horsepower)
denom <- sum((Auto$horsepower - x_raya)^2)
var(Auto$horsepower)*391
help(pt)
pt(54.429, df=390)
pt(54.429, df=390)
pt(2.6259, df=100)
1-pt(2.6259, df=100)
(1-pt(2.6259, df=100))*2
# install.packages("rpart") # Descomentar si no lo tienen ya instalado.
library(rpart)
# install.packages("titanic") # Descomentar si no lo tienen ya instalado.
library(titanic)
train <- titanic_train
test <- titanic_test
str(train)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
### **Datos**
Carguemos los datos que vamos a usar. Para este ejemplo, vamos a usar la base de datos `titanic`, que ya se encuentra cargada en R. (Usamos una base de datos similar sobre el Titanic en la P01, pero mediante un archivo CSV aparte).
# install.packages("rpart") # Descomentar si no lo tienen ya instalado.
library(rpart)
# install.packages("titanic") # Descomentar si no lo tienen ya instalado.
library(titanic)
train <- titanic_train
test <- titanic_test
str(train)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
table(is.na(train))
summary(train)
set.seed(22)
tree <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class")
# install.packages("rpart.plot") # Descomentar si no lo tienen ya instalado.
library(rpart.plot)
rpart.plot(tree)
test$Pclass <- as.factor(test$Pclass)
test$Sex <- as.factor(test$Sex)
predictions  <- predict(tree, newdata = test, type = "class")
train_withoutNA <- train
train_withoutNA$Age[is.na(train_withoutNA$Age)] <- mean(train_withoutNA$Age, na.rm = TRUE)
tree_withoutNA <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train_withoutNA,
method = "class")
predictions_withoutNA <- predict(tree_withoutNA, newdata = test, type = "class")
data.frame("predicciones_con_na" = predictions,
"predicciones_sin_na" = predictions_withoutNA)
# Load the necessary libraries for data analysis and visualization
library(ggplot2)  # For creating plots
# Load necessary libraries
library(rpart)
library(Metrics)
library(caret)
install.package("rlang")
install.packages("rlang")
install.packages("rlang")
# Load necessary libraries
library(rpart)
library(Metrics)
library(caret)
# Load necessary libraries
library(rpart)
library(Metrics)
library(caret)
# Load necessary libraries
library(rpart)
library(Metrics)
library(caret)
install.packages("rlang")
install.packages("rlang")
# Load necessary libraries
library(rpart)
library(Metrics)
library(caret)
#Cantidad de observaciones CO2
CO2 = read.csv("./data/CO2_Emissions_Transformado.csv")
nrow(CO2)
#Cantidad de observaciones Churn
Churn = read.csv("./data/customer_churn.csv")
nrow(Churn)
#Cantidad de observaciones Heart
Heart = read.csv("./data/heart.csv")
nrow(Heart)
---
title: "Experimento opci칩n 1"
#Cantidad de observaciones CO2
CO2 = read.csv("./data/CO2_Emissions_Transformado.csv")
nrow(CO2)
#Cantidad de observaciones Churn
Churn = read.csv("./data/customer_churn.csv")
nrow(Churn)
#Cantidad de observaciones Heart
Heart = read.csv("./data/heart.csv")
nrow(Heart)
#Cargamos el script
#ADVERTENCIA: correr este bloque de codigo hace que se vuelva a correr el experimento
suppressWarnings(source("exp_1.R"))
#CARGAMOS LA IMAGEN
suppressPackageStartupMessages(library(imager))
im<-load.image("./outputs/plots/exp_1.jpg")
plot(im, axes=FALSE)
#VER SI LA PODEMOS AGRANDAR!!!!!!!!!!!!!
---
title: "Experimento opci칩n 1"
setwd("~/Di Tella/A3S2/TecnologiaVI/TDVI_tp1")
#Modificamos la funcion provista para adecuarla a nuestro gr치fico
plot_exp_results <- function(filename_exp_results, filename_plot, width, height) {
# Load experiment results
exp_results <- read.table(filename_exp_results, header=TRUE, sep="\t")
# Calculate max tree_depth for different groups of experimental results
data_for_plot <- exp_results %>%
group_by(dataset_name, prop_NAs, IMPUTED, maxdepth) %>%
summarize(max_tree_depth_alcanzado=max(tree_depth), .groups='drop')
# Create a ggplot object for the line plot
g <- ggplot(data_for_plot, aes(x=maxdepth, y=max_tree_depth_alcanzado)) +
geom_line() +
theme_bw() +
xlab("Max depth given") +
ylab("Max tree depth reached") +
facet_grid(dataset_name ~ prop_NAs, scales="free_y") +
theme(legend.position="bottom",
panel.grid.major=element_blank(),
strip.background=element_blank(),
panel.border=element_rect(colour="black", fill=NA))
# Save the plot to a file
ggsave(filename_plot, g, width=width, height=height)
}
# Plot the experiment results
plot_exp_results( "./outputs/tables/exp_1.txt", "./outputs/plots/exp_1_alt.jpg", width=15, height=8)
#Cantidad de observaciones CO2
CO2 = read.csv("./data/CO2_Emissions_Transformado.csv")
nrow(CO2)
#Cantidad de observaciones Churn
Churn = read.csv("./data/customer_churn.csv")
nrow(Churn)
#Cantidad de observaciones Heart
Heart = read.csv("./data/heart.csv")
nrow(Heart)
#Cargamos el script
#ADVERTENCIA: correr este bloque de codigo hace que se vuelva a correr el experimento
suppressWarnings(source("exp_1.R"))
#CARGAMOS LA IMAGEN
suppressPackageStartupMessages(library(imager))
im<-load.image("./outputs/plots/exp_1.jpg")
plot(im, axes=FALSE)
#VER SI LA PODEMOS AGRANDAR!!!!!!!!!!!!!
numerical_cols <- unlist(lapply(Churn, is.numeric))
ChurnNumerical <- Churn[ , numerical_cols]
par(mfrow=c(2,5))
boxplot(ChurnNumerical$call_failure)
boxplot(ChurnNumerical$subscription_length)
boxplot(ChurnNumerical$charge_amount)
boxplot(ChurnNumerical$seconds_of_use)
boxplot(ChurnNumerical$frequency_of_use)
boxplot(ChurnNumerical$frequency_of_sms)
boxplot(ChurnNumerical$distinct_called_numbers)
boxplot(ChurnNumerical$age_group)
boxplot(ChurnNumerical$age)
boxplot(ChurnNumerical$customer_value)
numerical_cols <- unlist(lapply(Heart, is.numeric))
HeartNumericals <- Heart[ , numerical_cols]
par(mfrow=c(2,3))
boxplot(HeartNumericals$Age)
boxplot(HeartNumericals$RestingBP)
boxplot(HeartNumericals$Cholesterol)
boxplot(HeartNumericals$FastingBS)
boxplot(HeartNumericals$MaxHR)
boxplot(HeartNumericals$Oldpeak)
#Modificamos la funcion provista para adecuarla a nuestro gr치fico
plot_exp_results <- function(filename_exp_results, filename_plot, width, height) {
# Load experiment results
exp_results <- read.table(filename_exp_results, header=TRUE, sep="\t")
# Calculate max tree_depth for different groups of experimental results
data_for_plot <- exp_results %>%
group_by(dataset_name, prop_NAs, IMPUTED, maxdepth) %>%
summarize(max_tree_depth_alcanzado=max(tree_depth), .groups='drop')
# Create a ggplot object for the line plot
g <- ggplot(data_for_plot, aes(x=maxdepth, y=max_tree_depth_alcanzado)) +
geom_line() +
theme_bw() +
xlab("Max depth given") +
ylab("Max tree depth reached") +
facet_grid(dataset_name ~ prop_NAs, scales="free_y") +
theme(legend.position="bottom",
panel.grid.major=element_blank(),
strip.background=element_blank(),
panel.border=element_rect(colour="black", fill=NA))
# Save the plot to a file
ggsave(filename_plot, g, width=width, height=height)
}
# Plot the experiment results
plot_exp_results( "./outputs/tables/exp_1.txt", "./outputs/plots/exp_1_alt.jpg", width=15, height=8)
#Modificamos la funcion provista para adecuarla a nuestro gr치fico
plot_exp_results <- function(filename_exp_results, filename_plot, width, height) {
# Load experiment results
exp_results <- read.table(filename_exp_results, header=TRUE, sep="\t")
# Calculate max tree_depth for different groups of experimental results
data_for_plot <- exp_results %>%
group_by(dataset_name, prop_NAs, IMPUTED, maxdepth) %>%
summarize(max_tree_depth_alcanzado=max(tree_depth), .groups='drop')
# Create a ggplot object for the line plot
g <- ggplot(data_for_plot, aes(x=maxdepth, y=max_tree_depth_alcanzado, color=IMPUTED)) +
geom_line() +
theme_bw() +
xlab("Max depth given") +
ylab("Max tree depth reached") +
facet_grid(dataset_name ~ prop_NAs, scales="free_y") +
theme(legend.position="bottom",
panel.grid.major=element_blank(),
strip.background=element_blank(),
panel.border=element_rect(colour="black", fill=NA))
# Save the plot to a file
ggsave(filename_plot, g, width=width, height=height)
}
# Plot the experiment results
plot_exp_results( "./outputs/tables/exp_1.txt", "./outputs/plots/exp_1_alt.jpg", width=15, height=8)
#Modificamos la funcion provista para adecuarla a nuestro gr치fico
plot_exp_results <- function(filename_exp_results, filename_plot, width, height) {
# Load experiment results
exp_results <- read.table(filename_exp_results, header=TRUE, sep="\t")
# Calculate mean tree_depth for different groups of experimental results
data_for_plot <- exp_results %>%
group_by(dataset_name, prop_NAs, IMPUTED, maxdepth) %>%
summarize(mean_tree_depth_alcanzado=mean(tree_depth), .groups='drop')
# Create a ggplot object for the line plot
g <- ggplot(data_for_plot, aes(x=maxdepth, y=mean_tree_depth_alcanzado, color=IMPUTED)) +
geom_line() +
theme_bw() +
xlab("Max depth given") +
ylab("Max tree depth reached") +
facet_grid(dataset_name ~ prop_NAs, scales="free_y") +
theme(legend.position="bottom",
panel.grid.major=element_blank(),
strip.background=element_blank(),
panel.border=element_rect(colour="black", fill=NA))
# Save the plot to a file
ggsave(filename_plot, g, width=width, height=height)
}
# Plot the experiment results
plot_exp_results( "./outputs/tables/exp_1.txt", "./outputs/plots/exp_1_alt.jpg", width=15, height=8)
#Modificamos la funcion provista para adecuarla a nuestro gr치fico
plot_exp_results <- function(filename_exp_results, filename_plot, width, height) {
# Load experiment results
exp_results <- read.table(filename_exp_results, header=TRUE, sep="\t")
# Calculate mean tree_depth for different groups of experimental results
data_for_plot <- exp_results %>%
group_by(dataset_name, prop_NAs, IMPUTED, maxdepth) %>%
summarize(mean_tree_depth_alcanzado=mean(tree_depth), .groups='drop')
# Create a ggplot object for the line plot
g <- ggplot(data_for_plot, aes(x=maxdepth, y=mean_tree_depth_alcanzado, color=IMPUTED)) +
geom_line() +
theme_bw() +
xlab("Max depth given") +
ylab("Max tree depth reached") +
facet_grid(dataset_name ~ prop_NAs, scales="free_y") +
theme(legend.position="bottom",
panel.grid.major=element_blank(),
strip.background=element_blank(),
panel.border=element_rect(colour="black", fill=NA))
# Save the plot to a file
ggsave(filename_plot, g, width=width, height=height)
print(g)
}
# Generamos el nuevo plot llamado exp_1_alt.jpg
plot_exp_results( "./outputs/tables/exp_1.txt", "./outputs/plots/exp_1_alt.jpg", width=15, height=8)
#Cargamos el script
#ADVERTENCIA: correr este bloque de codigo hace que se vuelva a correr el experimento
suppressWarnings(source("exp_1.R"))
numerical_cols <- unlist(lapply(Heart, is.numeric))
HeartNumericals <- Heart[ , numerical_cols]
boxplot(HeartNumericals)
# par(mfrow=c(2,3))
# boxplot(HeartNumericals$Age)
# boxplot(HeartNumericals$RestingBP)
# boxplot(HeartNumericals$Cholesterol)
# boxplot(HeartNumericals$FastingBS)
# boxplot(HeartNumericals$MaxHR)
# boxplot(HeartNumericals$Oldpeak)
numerical_cols <- unlist(lapply(Heart, is.numeric))
HeartNumericals <- Heart[ , numerical_cols]
par(mfrow=c(2,3))
boxplot(HeartNumericals$Age)
boxplot(HeartNumericals$RestingBP)
boxplot(HeartNumericals$Cholesterol)
boxplot(HeartNumericals$FastingBS)
boxplot(HeartNumericals$MaxHR)
boxplot(HeartNumericals$Oldpeak)
#Obtengo la lista de variables numericas para facilitar el ploteo
numerical_cols <- unlist(lapply(Churn, is.numeric))
ChurnNumerical <- Churn[ , numerical_cols]
par(mfrow=c(2,5))
boxplot(ChurnNumerical$call_failure)
boxplot(ChurnNumerical$subscription_length)
boxplot(ChurnNumerical$charge_amount)
boxplot(ChurnNumerical$seconds_of_use)
boxplot(ChurnNumerical$frequency_of_use)
boxplot(ChurnNumerical$frequency_of_sms)
boxplot(ChurnNumerical$distinct_called_numbers)
boxplot(ChurnNumerical$age_group)
boxplot(ChurnNumerical$age)
boxplot(ChurnNumerical$customer_value)
#Obtengo la lista de variables numericas para facilitar el ploteo
numerical_cols <- unlist(lapply(Churn, is.numeric))
ChurnNumerical <- Churn[ , numerical_cols]
par(mfrow=c(2,5))
boxplot(ChurnNumerical$call_failure, xlab="")
boxplot(ChurnNumerical$subscription_length)
boxplot(ChurnNumerical$charge_amount)
boxplot(ChurnNumerical$seconds_of_use)
boxplot(ChurnNumerical$frequency_of_use)
boxplot(ChurnNumerical$frequency_of_sms)
boxplot(ChurnNumerical$distinct_called_numbers)
boxplot(ChurnNumerical$age_group)
boxplot(ChurnNumerical$age)
boxplot(ChurnNumerical$customer_value)
#Obtengo la lista de variables numericas para facilitar el ploteo
numerical_cols <- unlist(lapply(Churn, is.numeric))
ChurnNumerical <- Churn[ , numerical_cols]
par(mfrow=c(2,5))
boxplot(ChurnNumerical$call_failure, xlab="call_failure")
boxplot(ChurnNumerical$subscription_length)
boxplot(ChurnNumerical$charge_amount)
boxplot(ChurnNumerical$seconds_of_use)
boxplot(ChurnNumerical$frequency_of_use)
boxplot(ChurnNumerical$frequency_of_sms)
boxplot(ChurnNumerical$distinct_called_numbers)
boxplot(ChurnNumerical$age_group)
boxplot(ChurnNumerical$age)
boxplot(ChurnNumerical$customer_value)
#Obtengo la lista de variables numericas para facilitar el ploteo
numerical_cols <- unlist(lapply(Churn, is.numeric))
ChurnNumerical <- Churn[ , numerical_cols]
par(mfrow=c(2,5))
boxplot(ChurnNumerical$call_failure, xlab="call_failure")
boxplot(ChurnNumerical$subscription_length, xlab="subscription_length")
boxplot(ChurnNumerical$charge_amount, xlab="")
boxplot(ChurnNumerical$seconds_of_use, xlab="")
boxplot(ChurnNumerical$frequency_of_use, xlab="")
boxplot(ChurnNumerical$frequency_of_sms, xlab="")
boxplot(ChurnNumerical$distinct_called_numbers, xlab="")
boxplot(ChurnNumerical$age_group, xlab="")
boxplot(ChurnNumerical$age, xlab="")
boxplot(ChurnNumerical$customer_value, xlab="")
#Obtengo la lista de variables numericas para facilitar el ploteo
numerical_cols <- unlist(lapply(Churn, is.numeric))
ChurnNumerical <- Churn[ , numerical_cols]
par(mfrow=c(2,5))
boxplot(ChurnNumerical$call_failure, xlab="call_failure")
boxplot(ChurnNumerical$subscription_length, xlab="subscription_length")
boxplot(ChurnNumerical$charge_amount, xlab="charge_amount")
boxplot(ChurnNumerical$seconds_of_use, xlab="seconds_of_use")
boxplot(ChurnNumerical$frequency_of_use, xlab="frequency_of_use")
boxplot(ChurnNumerical$frequency_of_sms, xlab="frequency_of_sms")
boxplot(ChurnNumerical$distinct_called_numbers, xlab="distinct_called_numbers")
boxplot(ChurnNumerical$age_group, xlab="age_group")
boxplot(ChurnNumerical$age, xlab="age")
boxplot(ChurnNumerical$customer_value, xlab="customer_value")
numerical_cols <- unlist(lapply(Heart, is.numeric))
HeartNumericals <- Heart[ , numerical_cols]
par(mfrow=c(2,3))
boxplot(HeartNumericals$Age, xlab="Age")
boxplot(HeartNumericals$RestingBP, xlab="RestingBP")
boxplot(HeartNumericals$Cholesterol, xlab="Cholesterol")
boxplot(HeartNumericals$FastingBS, xlab="FastingBS")
boxplot(HeartNumericals$MaxHR, xlab="MaxHR")
boxplot(HeartNumericals$Oldpeak, xlab="Oldpeak")
# Cargamos el script
# A la funcion plot_exp_results le agregamos un print del gr치fico
# para facilitar el display ac치
suppressWarnings(source("exp_1.R"))
# Cargamos el script
# A la funcion plot_exp_results le agregamos un print del gr치fico
# para facilitar el display ac치
suppressWarnings(source("exp_1.R"))
# Cargamos el script
# A la funcion plot_exp_results le agregamos un print del gr치fico
# para facilitar el display ac치
suppressWarnings(source("exp_1.R"))
# Cargamos el script
# A la funcion plot_exp_results le agregamos un print del gr치fico
# para facilitar el display ac치
suppressWarnings(source("exp_1.R"))
# Cargamos el script
# A la funcion plot_exp_results le agregamos un print del gr치fico
# para facilitar el display ac치
suppressWarnings(source("exp_1.R"))
#Modificamos la funcion provista para adecuarla a nuestro gr치fico
plot_exp_results <- function(filename_exp_results, filename_plot, width, height) {
# Load experiment results
exp_results <- read.table(filename_exp_results, header=TRUE, sep="\t")
# Calculamos la media de los tree_depth para cada grupo
data_for_plot <- exp_results %>%
group_by(dataset_name, prop_NAs, IMPUTED, maxdepth) %>%
summarize(mean_tree_depth_alcanzado=mean(tree_depth), .groups='drop')
g <- ggplot(data_for_plot, aes(x=maxdepth, y=mean_tree_depth_alcanzado, color=IMPUTED)) +
geom_line() +
theme_bw() +
ggtitle("Proportion of NAs")+
xlab("Max depth given") +
ylab("Max tree depth reached") +
facet_grid(dataset_name ~ prop_NAs, scales="free_y") +
theme(legend.position="bottom",
panel.grid.major=element_blank(),
strip.background=element_blank(),
panel.border=element_rect(colour="black", fill=NA),
plot.title.position = 'plot',
plot.title = element_text(hjust=0.5, size=10))
ggsave(filename_plot, g, width=width, height=height)
# Printeamos para mostrarlo por pantalla
print(g)
}
# Generamos el nuevo plot llamado exp_1_alt.jpg
plot_exp_results( "./outputs/tables/exp_1.txt", "./outputs/plots/exp_1_alt.jpg", width=15, height=8)
